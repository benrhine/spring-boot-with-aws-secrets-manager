#name: GitHub Actions Demo
#run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
#on: [push]
#jobs:
#  Explore-GitHub-Actions:
#    runs-on: ubuntu-latest
#    steps:
#      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
#      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#      - name: Check out repository code
#        uses: actions/checkout@v4
#      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
#      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
#      - name: List files in the repository
#        run: |
#          ls ${{ github.workspace }}
#      - run: echo "🍏 This job's status is ${{ job.status }}."


# Sample workflow to access AWS resources when workflow is tied to branch
# The workflow Creates static website using aws s3
name: Apply DCP Resources
on:
  push
env:
  BUCKET_TF_STATE : "brr-tools-test"
  AWS_REGION : "us-east-2"
# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform/aws/dpc-resources

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::792981815698:role/github_oidc_assume_role
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: check where i am
        id: ls
        run: ls -alh

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
       # if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

#      - uses: actions/github-script@v6
#        #if: github.event_name == 'pull_request'
#        env:
#          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#        with:
#          script: |
#            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
#            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
#            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
#            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
#
#            <details><summary>Show Plan</summary>
#
#            \`\`\`\n
#            ${process.env.PLAN}
#            \`\`\`
#
#            </details>
#            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve