name: Destroy DPC Resources
on:
  # https://docs.github.com/en/actions/reference/workflows-and-actions/events-that-trigger-workflows#workflow_dispatch
  # https://docs.github.com/en/actions/how-tos/manage-workflow-runs/manually-run-a-workflow
  workflow_dispatch:
#  push
env:
  BUCKET_TF_STATE : "ids-dpc-terraform-state"
  AWS_REGION : "us-east-2"
# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform/aws/dpc-base-cloud-resources/account-tools

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::792981815698:role/github_oidc_assume_role
          role-session-name: samplerolesession
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: check where i am
        id: ls
        run: ls -alh

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform plan --destroy
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan --destroy -no-color -input=false
        continue-on-error: true

      #      - uses: actions/github-script@v6
      #        #if: github.event_name == 'pull_request'
      #        env:
      #          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #        with:
      #          script: |
      #            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #
      #            <details><summary>Show Plan</summary>
      #
      #            \`\`\`\n
      #            ${process.env.PLAN}
      #            \`\`\`
      #
      #            </details>
      #            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #
      #            github.rest.issues.createComment({
      #              issue_number: context.issue.number,
      #              owner: context.repo.owner,
      #              repo: context.repo.repo,
      #              body: output
      #            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform destroy -auto-approve